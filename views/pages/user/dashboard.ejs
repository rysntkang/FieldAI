<!DOCTYPE html>
<html lang="en">
<head>
  <title>FieldAi Dashboard</title>
  <%- include('../../partials/user/head') %>
  <style>
    .sidebar {
      height: 100vh;
      width: 250px;
      position: fixed;
      top: 0;
      left: 0;
      background-color: #343a40;
      padding-top: 20px;
    }
    .sidebar a {
      color: #fff;
      text-decoration: none;
      padding: 15px 20px;
      display: block;
    }
    .sidebar a:hover {
      background-color: #495057;
    }
    .sidebar a.active {
      background-color: #007bff;
      color: #fff;
    }
    .content {
      margin-left: 250px;
      padding: 20px;
    }
    .sector-card {
      padding: 0;
    }

    .sector-card .card {
      height: 100%;
      margin: 0;
      transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
    }

    .sector-card .card:hover {
      transform: scale(1.02);
      box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.2);
    }
    #map {
      height: 300px;
      margin-top: 10px;
    }
    .chart-container {
      height: 300px;
      width: 100%;
      position: relative;
    }
    .chart-canvas {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
    }
    .farming-tip {
      display: flex;
      align-items: center;
      margin-bottom: 8px;
      cursor: pointer;
    }
    .farming-tip .emoji {
      font-size: 1.2em;
      margin-right: 8px;
    }
    /* Style for the weather source label */
    #weatherSource {
      margin-top: 10px;
      font-style: italic;
      color: #555;
    }
    /* Style for the reset button */
    #resetWeatherBtn {
      margin: 10px 0;
    }
  </style>
</head>
<body>
  <%- include('../../partials/user/sidebar') %>

  <div class="content">
    <h3>Your Sectors</h3>
    <div class="row" id="sectors-container">
      <% if (sectors.length > 0) { %>
        <% sectors.forEach(sector => { %>
          <!-- Embed sector coordinates as data attributes -->
          <div class="col-md-3 sector-card" data-lat="<%= sector.latitude %>" data-lng="<%= sector.longitude %>">
            <div class="card">
              <div class="card-body">
                <h5 class="card-title"><%= sector.name %></h5>
                <p class="card-text">Lat: <%= sector.latitude %>, Lng: <%= sector.longitude %></p>
                <button class="btn btn-primary btn-sm upload-btn" 
                        data-toggle="modal" 
                        data-target="#uploadImageModal" 
                        data-sectorid="<%= sector.sector_id %>">
                  Upload Images
                </button>
                <button class="btn btn-secondary btn-sm view-results-btn" 
                        data-toggle="modal" 
                        data-target="#resultsModal" 
                        data-sectorid="<%= sector.sector_id %>">
                  View Results
                </button>
              </div>
            </div>
          </div>
        <% }); %>
      <% } else { %>
        <div class="col-12 text-left">
          <p class="text-muted">No sectors available. Please add a new sector to get started.</p>
        </div>
      <% } %>
    </div>
    
    <button class="btn btn-success mt-3" data-toggle="modal" data-target="#addSectorModal">
      Add New Sector
    </button>
    <hr>

    <% if (weatherData && weatherData.length > 0) { %>
      <h3>Weather Trend Forecast</h3>
      <!-- Weather source information and reset button -->
      <p id="weatherSource">Currently displaying weather data for: Account Location (<%= user.latitude %>, <%= user.longitude %>)</p>
      <button id="resetWeatherBtn" class="btn btn-info btn-sm">Reset to Account Location</button>
      
      <div id="temperature-section" class="content-section">
        <div class="row mb-4">
          <div class="col-md-4">
            <div class="card bg-light">
              <div class="card-body">
                <h5 class="card-title">üå± Farming Tips</h5>
                <div id="farmingTips"></div>
              </div>
            </div>
          </div>
          <!-- Heat Accumulation Chart -->
          <div class="col-md-8">
            <div class="chart-container">
              <h4>Heat Accumulation (GDD)</h4>
              <canvas id="gddChart" class="chart-canvas"></canvas>
            </div>
          </div>
        </div>
        <hr>
        <div class="chart-container">
          <h4>Temperature</h4>
          <canvas id="temperatureChart" class="chart-canvas"></canvas>
        </div>
        <hr>
        <div class="chart-container">
          <h4>Precipitation</h4>
          <canvas id="precipitationChart" class="chart-canvas"></canvas>
        </div>
        <hr>
        <div class="chart-container">
          <h4>Wind Speed</h4>
          <canvas id="windSpeedChart" class="chart-canvas"></canvas>
        </div>
        <hr>
        <div class="chart-container">
          <h4>Soil Moisture</h4>
          <canvas id="soilMoistureChart" class="chart-canvas"></canvas>
        </div>
      </div>
      <hr>
    <% } %>

    <%- include('../../partials/user/modals/addSector') %>
    <%- include('../../partials/user/modals/upload') %>
    <%- include('../../partials/user/modals/results') %>
  </div>

  <footer class="bg-dark text-center text-white py-3 static-bottom">
    <%- include('../../partials/user/footer') %>
  </footer>

  <%- include('../../partials/user/scripts') %>
  <script>
    // -------------------------------
    // Global: createChart function
    // -------------------------------
    function createChart(canvasId, data, labels, title, yLabel, borderColor, backgroundColor, type = 'line') {
      const ctx = document.getElementById(canvasId).getContext('2d');
      return new Chart(ctx, {
        type: type,
        data: {
          labels: labels,  // Use the labels parameter
          datasets: [{
            label: title,
            data: data,
            borderColor: borderColor,
            backgroundColor: backgroundColor,
            fill: true,
            tension: 0.4
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          scales: {
            x: { title: { display: true, text: 'Date' } },
            y: { title: { display: true, text: yLabel } }
          },
          plugins: { legend: { position: 'top' }, title: { display: true, text: title } }
        }
      });
    }
    // -------------------------------
    // End Global createChart function
    // -------------------------------

    // Account's original coordinates (from the session)
    const accountLat = <%= user.latitude %>;
    const accountLng = <%= user.longitude %>;

    // Initialize map when adding a sector
    $('#addSectorModal').on('shown.bs.modal', function() {
      initMap();
      setTimeout(() => map.invalidateSize(), 100);
    });

    // Map Functions
    let map, marker;
    function initMap() {
      if (map) {
        map.off();
        map.remove();
        map = null;
      }
      navigator.geolocation.getCurrentPosition(position => {
        const { latitude, longitude } = position.coords;
        map = L.map('map').setView([latitude, longitude], 13);
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png').addTo(map);
        marker = L.marker([latitude, longitude], { draggable: true }).addTo(map);
        document.getElementById('latitude').value = latitude;
        document.getElementById('longitude').value = longitude;
        marker.on('dragend', () => {
          const { lat, lng } = marker.getLatLng();
          document.getElementById('latitude').value = lat;
          document.getElementById('longitude').value = lng;
        });
      });
    }

    // Farming Tips Function
    function generateFarmingTips(data) {
      const today = data[0];
      const tips = [];
      if (today.gdd_accumulated > 100) {
        tips.push({
          emoji: '‚úîÔ∏è',
          text: 'Good time for planting!',
          type: 'success',
          explanation: 'The accumulated heat (GDD) is high enough for optimal corn planting.'
        });
      } else {
        tips.push({
          emoji: '‚è≥',
          text: 'Wait for warmer days before planting.',
          type: 'warning',
          explanation: 'The current GDD is low, indicating that the heat accumulation is not yet ideal for planting.'
        });
      }
      if (today.soil_moisture < 0.3) {
        tips.push({
          emoji: 'üö∞',
          text: 'Irrigation needed ‚Äì soil moisture is low.',
          type: 'danger',
          explanation: 'Soil moisture levels are below the optimal range. Your crops may need watering soon.'
        });
      } else {
        tips.push({
          emoji: 'üíß',
          text: 'Soil moisture is good.',
          type: 'success',
          explanation: 'The soil moisture level is within a healthy range for corn growth.'
        });
      }
      if (today.precipitation > 5) {
        tips.push({
          emoji: '‚òî',
          text: 'Heavy rain expected ‚Äì ensure proper drainage.',
          type: 'info',
          explanation: 'High precipitation may lead to waterlogging; consider checking your drainage systems.'
        });
      }
      if (today.wind_speed > 15) {
        tips.push({
          emoji: 'üí®',
          text: 'High winds detected ‚Äì consider windbreaks.',
          type: 'warning',
          explanation: 'Strong winds can damage young plants. It might be wise to set up windbreaks.'
        });
      }
      if (today.temp_min < 10) {
        tips.push({
          emoji: '‚ùÑÔ∏è',
          text: 'Low temperatures expected ‚Äì protect young plants from frost.',
          type: 'warning',
          explanation: 'The forecasted minimum temperature is low, increasing the risk of frost damage for sensitive crops.'
        });
      }
      return tips;
    }

    document.addEventListener('DOMContentLoaded', () => {
      const weatherData = <%- JSON.stringify(weatherData) %>;
      
      // Generate and display farming tips
      const tips = generateFarmingTips(weatherData);
      const farmingTipsDiv = document.getElementById('farmingTips');
      farmingTipsDiv.innerHTML = '';
      tips.forEach(function(tip) {
        const tipDiv = document.createElement('div');
        tipDiv.classList.add('farming-tip');
        tipDiv.setAttribute('title', tip.explanation);
        const emojiSpan = document.createElement('span');
        emojiSpan.classList.add('emoji');
        emojiSpan.textContent = tip.emoji;
        const textSpan = document.createElement('span');
        textSpan.classList.add('tip-text', `text-${tip.type}`);
        textSpan.textContent = tip.text;
        tipDiv.appendChild(emojiSpan);
        tipDiv.appendChild(textSpan);
        farmingTipsDiv.appendChild(tipDiv);
      });
      
      // Create initial charts using the global createChart function
      const temperatureChart = createChart(
        'temperatureChart',
        weatherData.map(item => item.temp_max),
        weatherData.map(item => item.date),
        'Daily Temperature Trends',
        'Temperature (¬∞C)',
        'rgba(255, 99, 132, 1)',
        'rgba(255, 99, 132, 0.2)'
      );
      
      const precipitationChart = createChart(
        'precipitationChart',
        weatherData.map(item => item.precipitation),
        weatherData.map(item => item.date),
        'Daily Precipitation',
        'Precipitation (mm)',
        'rgba(75, 192, 192, 1)',
        'rgba(75, 192, 192, 0.5)',
        'bar'
      );
      
      const windSpeedChart = createChart(
        'windSpeedChart',
        weatherData.map(item => item.wind_speed),
        weatherData.map(item => item.date),
        'Daily Wind Speed',
        'Wind Speed (m/s)',
        'rgba(255, 205, 86, 1)',
        'rgba(255, 205, 86, 0.2)'
      );
      
      const gddChart = createChart(
        'gddChart',
        weatherData.map(item => item.gdd_accumulated),
        weatherData.map(item => item.date),
        'Growing Degree Days',
        'GDD Accumulation',
        'rgba(139, 69, 19, 1)',
        'rgba(139, 69, 19, 0.2)'
      );
      
      const soilMoistureChart = createChart(
        'soilMoistureChart',
        weatherData.map(item => item.soil_moisture),
        weatherData.map(item => item.date),
        'Soil Moisture Level',
        'Moisture (m¬≥/m¬≥)',
        'rgba(0, 123, 255, 1)',
        'rgba(0, 123, 255, 0.2)'
      );
      
      window.addEventListener('resize', () => {
        temperatureChart.resize();
        precipitationChart.resize();
        windSpeedChart.resize();
        gddChart.resize();
        soilMoistureChart.resize();
      });
    });

    // Sector card click handler: update weather data based on sector coordinates.
    document.getElementById('sectors-container').addEventListener('click', (e) => {
      const uploadBtn = e.target.closest('.upload-btn');
      const resultsBtn = e.target.closest('.view-results-btn');
      
      if (uploadBtn) {
        document.getElementById('uploadSectorId').value = uploadBtn.dataset.sectorid;
      }
      
      if (resultsBtn) {
        loadResultsModal(resultsBtn.dataset.sectorid);
      }
      
      // If a sector card is clicked, fetch field-specific weather data.
      const sectorCard = e.target.closest('.sector-card');
      if (sectorCard) {
        const lat = sectorCard.getAttribute('data-lat');
        const lng = sectorCard.getAttribute('data-lng');
        updateWeatherForSector(lat, lng, 'Sector');
      }
    });
    
    // Function to update weather data for a specific location.
    // The parameter "source" indicates if the data is from a "Sector" or "Account".
    async function updateWeatherForSector(lat, lng, source = 'Sector') {
      try {
        const response = await fetch(`/user/weather?lat=${lat}&lng=${lng}`);
        if (!response.ok) throw new Error(await response.text());
        const newWeatherData = await response.json();
        
        // Update the weather source label
        document.getElementById('weatherSource').textContent =
          `Currently displaying weather data for: ${source} Location (${lat}, ${lng})`;
        
        // Update farming tips
        const tips = generateFarmingTips(newWeatherData);
        const farmingTipsDiv = document.getElementById('farmingTips');
        farmingTipsDiv.innerHTML = '';
        tips.forEach(function(tip) {
          const tipDiv = document.createElement('div');
          tipDiv.classList.add('farming-tip');
          tipDiv.setAttribute('title', tip.explanation);
          const emojiSpan = document.createElement('span');
          emojiSpan.classList.add('emoji');
          emojiSpan.textContent = tip.emoji;
          const textSpan = document.createElement('span');
          textSpan.classList.add('tip-text', `text-${tip.type}`);
          textSpan.textContent = tip.text;
          tipDiv.appendChild(emojiSpan);
          tipDiv.appendChild(textSpan);
          farmingTipsDiv.appendChild(tipDiv);
        });
        
        // Replace chart canvases with new ones
        document.getElementById('temperatureChart').parentNode.innerHTML = '<canvas id="temperatureChart" class="chart-canvas"></canvas>';
        document.getElementById('precipitationChart').parentNode.innerHTML = '<canvas id="precipitationChart" class="chart-canvas"></canvas>';
        document.getElementById('windSpeedChart').parentNode.innerHTML = '<canvas id="windSpeedChart" class="chart-canvas"></canvas>';
        document.getElementById('gddChart').parentNode.innerHTML = '<canvas id="gddChart" class="chart-canvas"></canvas>';
        
        // Re-create charts with newWeatherData using the global createChart function
        const temperatureChart = createChart(
          'temperatureChart',
          newWeatherData.map(item => item.temp_max),
          newWeatherData.map(item => item.date),
          'Daily Temperature Trends',
          'Temperature (¬∞C)',
          'rgba(255, 99, 132, 1)',
          'rgba(255, 99, 132, 0.2)'
        );
        const precipitationChart = createChart(
          'precipitationChart',
          newWeatherData.map(item => item.precipitation),
          newWeatherData.map(item => item.date),
          'Daily Precipitation',
          'Precipitation (mm)',
          'rgba(75, 192, 192, 1)',
          'rgba(75, 192, 192, 0.5)',
          'bar'
        );
        const windSpeedChart = createChart(
          'windSpeedChart',
          newWeatherData.map(item => item.wind_speed),
          newWeatherData.map(item => item.date),
          'Daily Wind Speed',
          'Wind Speed (m/s)',
          'rgba(255, 205, 86, 1)',
          'rgba(255, 205, 86, 0.2)'
        );
        const gddChart = createChart(
          'gddChart',
          newWeatherData.map(item => item.gdd_accumulated),
          newWeatherData.map(item => item.date),
          'Growing Degree Days',
          'GDD Accumulation',
          'rgba(139, 69, 19, 1)',
          'rgba(139, 69, 19, 0.2)'
        );
      } catch (error) {
        console.error("Error updating weather for sector:", error);
        alert("Failed to update weather data for the selected location.");
      }
    }
    
    // Reset button handler: update weather data back to the account's original coordinates.
    document.getElementById('resetWeatherBtn').addEventListener('click', () => {
      updateWeatherForSector(accountLat, accountLng, 'Account');
    });
    
    // File Upload Handling
    document.getElementById('imageInput').addEventListener('change', function() {
      const maxFiles = 5;
      if (this.files.length > maxFiles) {
        alert(`Maximum ${maxFiles} files allowed`);
        this.value = '';
        return;
      }
      this.nextElementSibling.textContent = this.files.length > 0 
        ? `${this.files.length} files selected` 
        : 'Choose files';
    });
    
    // Upload Form Submission
    document.getElementById('uploadForm').addEventListener('submit', async (e) => {
      e.preventDefault();
      const formData = new FormData(e.target);
      try {
        const response = await fetch('/upload/image', {
          method: 'POST',
          body: formData
        });
        if (!response.ok) throw new Error(await response.text());
        alert('Upload successful!');
        $('#uploadImageModal').modal('hide');
        location.reload();
      } catch (error) {
        alert(`Upload failed: ${error.message}`);
      }
    });
    
    // Results Modal Handler
    async function loadResultsModal(sectorId) {
      const modal = $('#resultsModal');
      const content = document.getElementById('resultsContent');
      content.innerHTML = `
        <div class="text-center py-4">
          <div class="spinner-border text-primary" role="status">
            <span class="sr-only">Loading...</span>
          </div>
        </div>`;
      try {
        const response = await fetch(`/results/${sectorId}`);
        if (!response.ok) throw new Error(`Server error: ${response.status}`);
        content.innerHTML = await response.text();
        modal.modal('show');
      } catch (error) {
        content.innerHTML = `
          <div class="alert alert-danger">
            Failed to load results: ${error.message}
          </div>`;
      }
    }
  </script>
</body>
</html>
