<!DOCTYPE html>
<html lang="en">
<head>
  <title>FieldAi Dashboard</title>
  <%- include('../../partials/user/head') %>
  <style>
    .sidebar {
      height: 100vh;
      width: 250px;
      position: fixed;
      top: 0;
      left: 0;
      background-color: #343a40;
      padding-top: 20px;
    }
    .sidebar a {
      color: #fff;
      text-decoration: none;
      padding: 15px 20px;
      display: block;
    }
    .sidebar a:hover {
      background-color: #495057;
    }
    .sidebar a.active {
      background-color: #007bff;
      color: #fff;
    }
    .content {
      margin-left: 250px;
      padding: 20px;
    }
    .sector-card {
      margin-bottom: 20px;
    }
    #map {
      height: 300px;
      margin-top: 10px;
    }

    .chart-container {
      height: 300px;
      width: 100%;
      position: relative;
    }
    .chart-canvas {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
    }
  </style>
</head>
<body>
  <%- include('../../partials/user/sidebar') %>

  <div class="content">
    <h3>Your Sectors</h3>
    <div class="row" id="sectors-container">
      <% if (sectors.length > 0) { %>
        <% sectors.forEach(sector => { %>
          <div class="col-md-3 sector-card">
            <div class="card">
              <div class="card-body">
                <h5 class="card-title"><%= sector.name %></h5>
                <p class="card-text">Lat: <%= sector.latitude %>, Lng: <%= sector.longitude %></p>
                <button class="btn btn-primary btn-sm upload-btn" 
                        data-toggle="modal" 
                        data-target="#uploadImageModal" 
                        data-sectorid="<%= sector.sector_id %>">
                  Upload Images
                </button>
                <button class="btn btn-secondary btn-sm view-results-btn" 
                        data-toggle="modal" 
                        data-target="#resultsModal" 
                        data-sectorid="<%= sector.sector_id %>">
                  View Results
                </button>
              </div>
            </div>
          </div>
        <% }); %>
      <% } else { %>
        <p>No sectors available. Please add a new sector to get started.</p>
      <% } %>
    </div>
    
    <button class="btn btn-success mt-3" data-toggle="modal" data-target="#addSectorModal">
      Add New Sector
    </button>
    <hr>

    <% if (temperatureData && temperatureData.length > 0) { %>
      <h3>Weather Data</h3>
      <div id="temperature-section" class="content-section">

        <div class="chart-container">
          <h4>Temperature Forecast Trends</h4>
          <canvas id="temperatureChart" class="chart-canvas"></canvas>
        </div>

        <div class="chart-container">
          <h4>Precipitation</h4>
          <canvas id="precipitationChart" class="chart-canvas"></canvas>
        </div>

        <div class="chart-container">
          <h4>Wind Speed</h4>
          <canvas id="windSpeedChart" class="chart-canvas"></canvas>
        </div>

      </div>
      <hr>
    <% } %>

    <%- include('../../partials/user/modals/addSector') %>
    <%- include('../../partials/user/modals/upload') %>
    <%- include('../../partials/user/modals/results') %>
  </div>

  <footer class="bg-dark text-center text-white py-3 static-bottom">
    <%- include('../../partials/user/footer') %>
  </footer>

  <%- include('../../partials/user/scripts') %>
  <script>
    // Map Initialization
    $('#addSectorModal').on('shown.bs.modal', function() {
      initMap();
      setTimeout(() => map.invalidateSize(), 100);
    });

    let map, marker;
    function initMap() {
      if (map) {
        map.off();
        map.remove();
        map = null;
      }
      
      navigator.geolocation.getCurrentPosition(position => {
        const { latitude, longitude } = position.coords;
        map = L.map('map').setView([latitude, longitude], 13);
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png').addTo(map);
        marker = L.marker([latitude, longitude], { draggable: true }).addTo(map);
        
        document.getElementById('latitude').value = latitude;
        document.getElementById('longitude').value = longitude;

        marker.on('dragend', () => {
          const { lat, lng } = marker.getLatLng();
          document.getElementById('latitude').value = lat;
          document.getElementById('longitude').value = lng;
        });
      });
    }

    document.addEventListener('DOMContentLoaded', () => {
      const temperatureData = <%- JSON.stringify(temperatureData) %>;
      const tempSection = document.getElementById('temperature-section');

      if (!temperatureData || temperatureData.length === 0) {
          tempSection.hidden = true;
          return;
      }

       // Function to create a chart (reusable)
       function createChart(canvasId, data, labels, title, yLabel, borderColor, backgroundColor, type = 'line') {
        const ctx = document.getElementById(canvasId).getContext('2d');
        return new Chart(ctx, {
          type: type,
          data: {
            labels: temperatureData.map(item => item.date), // Use temperatureData consistently
            datasets: [{
              label: title,
              data: data,
              borderColor: borderColor,
              backgroundColor: backgroundColor,
              fill: true,
              tension: 0.4
            }]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
              x: { title: { display: true, text: 'Date' } },
              y: { title: { display: true, text: yLabel } }
            },
            plugins: { legend: { position: 'top' }, title: { display: true, text: title } }
          }
        });
      }

      // Create the charts
      const temperatureChart = createChart('temperatureChart', temperatureData.map(item => item.temp_max),  temperatureData.map(item => item.date), 'Daily Temperature Trends', 'Temperature (Â°C)', 'rgba(255, 99, 132, 1)', 'rgba(255, 99, 132, 0.2)');

      const precipitationChart = createChart('precipitationChart', temperatureData.map(item => item.precipitation), temperatureData.map(item => item.date), 'Daily Precipitation', 'Precipitation (mm)', 'rgba(75, 192, 192, 1)', 'rgba(75, 192, 192, 0.5)', 'bar');

      const windSpeedChart = createChart('windSpeedChart', temperatureData.map(item => item.wind_speed), temperatureData.map(item => item.date), 'Daily Wind Speed', 'Wind Speed (m/s)', 'rgba(255, 205, 86, 1)', 'rgba(255, 205, 86, 0.2)');


      // Resize event listener (Important!)
      window.addEventListener('resize', () => {
          temperatureChart.resize();
          precipitationChart.resize();
          windSpeedChart.resize();
      });
    });
    
    // Event Delegation for Buttons
    document.getElementById('sectors-container').addEventListener('click', (e) => {
      const uploadBtn = e.target.closest('.upload-btn');
      const resultsBtn = e.target.closest('.view-results-btn');
      
      if (uploadBtn) {
        document.getElementById('uploadSectorId').value = uploadBtn.dataset.sectorid;
      }
      
      if (resultsBtn) {
        loadResultsModal(resultsBtn.dataset.sectorid);
      }
    });

    // File Upload Handling
    document.getElementById('imageInput').addEventListener('change', function() {
      const maxFiles = 5;
      if (this.files.length > maxFiles) {
        alert(`Maximum ${maxFiles} files allowed`);
        this.value = '';
        return;
      }
      this.nextElementSibling.textContent = this.files.length > 0 
        ? `${this.files.length} files selected` 
        : 'Choose files';
    });

    // Upload Form Submission
    document.getElementById('uploadForm').addEventListener('submit', async (e) => {
      e.preventDefault();
      const formData = new FormData(e.target);

      try {
        const response = await fetch('/upload/image', {
          method: 'POST',
          body: formData
        });
        
        if (!response.ok) throw new Error(await response.text());
        alert('Upload successful!');
        $('#uploadImageModal').modal('hide');
        location.reload(); // Refresh to show new upload
      } catch (error) {
        alert(`Upload failed: ${error.message}`);
      }
    });

    // Results Modal Handler
    async function loadResultsModal(sectorId) {
      const modal = $('#resultsModal');
      const content = document.getElementById('resultsContent');
      
      content.innerHTML = `
        <div class="text-center py-4">
          <div class="spinner-border text-primary" role="status">
            <span class="sr-only">Loading...</span>
          </div>
        </div>`;

      try {
        const response = await fetch(`/results/${sectorId}`);
        if (!response.ok) throw new Error(`Server error: ${response.status}`);
        content.innerHTML = await response.text();
        modal.modal('show');
      } catch (error) {
        content.innerHTML = `
          <div class="alert alert-danger">
            Failed to load results: ${error.message}
          </div>`;
      }
    }
  </script>
</body>
</html>