<!DOCTYPE html>
<html lang="en">
<head>
  <title>FieldAi Dashboard</title>
  <%- include('../../partials/user/head') %>
  <style>
    .sidebar {
      height: 100vh;
      width: 250px;
      position: fixed;
      top: 0;
      left: 0;
      background-color: #343a40;
      padding-top: 20px;
    }
    .sidebar a {
      color: #fff;
      text-decoration: none;
      padding: 15px 20px;
      display: block;
    }
    .sidebar a:hover {
      background-color: #495057;
    }
    .sidebar a.active {
      background-color: #007bff;
      color: #fff;
    }
    .content {
      margin-left: 250px;
      padding: 20px;
    }
    .sector-card {
      margin-bottom: 20px;
    }
    #map {
      height: 300px;
      margin-top: 10px;
    }
  </style>
</head>
<body>
  <%- include('../../partials/user/sidebar') %>

  <div class="content">
    <h3>Your Sectors</h3>
    <div class="row" id="sectors-container">
      <% if (sectors.length > 0) { %>
        <% sectors.forEach(sector => { %>
          <div class="col-md-3 sector-card">
            <div class="card">
              <div class="card-body">
                <h5 class="card-title"><%= sector.name %></h5>
                <p class="card-text">Lat: <%= sector.latitude %>, Lng: <%= sector.longitude %></p>
                <button class="btn btn-primary btn-sm upload-btn" data-toggle="modal" data-target="#uploadImageModal" data-sectorid="<%= sector.sector_id %>">
                  Upload Images
                </button>
                <button class="btn btn-secondary btn-sm view-results-btn" data-toggle="modal" data-target="#resultsModal" data-sectorid="<%= sector.sector_id %>">
                  View Results
                </button>
              </div>
            </div>
          </div>
        <% }); %>
      <% } else { %>
        <p>No sectors available. Please add a new sector to get started.</p>
      <% } %>
    </div>
    
    <button class="btn btn-success mt-3" 
            data-toggle="modal" 
            data-target="#addSectorModal">
      Add New Sector
    </button>
    <hr>

    <h3>Weather Data</h3>
    <div id="temperature-section" class="content-section">
      <h4>Temperature Forecast Trends</h4>
      <canvas id="temperatureChart"></canvas>
    </div>
    <hr>

    <%- include('../../partials/user/modals/addSector') %>
    <%- include('../../partials/user/modals/upload') %>
    <%- include('../../partials/user/modals/results') %>
  </div>

  <footer class="bg-dark text-center text-white py-3 static-bottom">
    <%- include('../../partials/user/footer') %>
  </footer>

  <%- include('../../partials/user/scripts') %>
  <script>
    $('#addSectorModal').on('shown.bs.modal', function() {
      initMap();
    });

    let map, marker;
    function initMap() {
      if(map) map.remove(); // Clear existing map
      
      navigator.geolocation.getCurrentPosition(position => {
        const { latitude, longitude } = position.coords;

        map = L.map('map').setView([latitude, longitude], 13);
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
          attribution: '© OpenStreetMap contributors',
        }).addTo(map);

        marker = L.marker([latitude, longitude], { 
          draggable: true 
        }).addTo(map);

        document.getElementById('latitude').value = latitude;
        document.getElementById('longitude').value = longitude;

        marker.on('dragend', () => {
          const { lat, lng } = marker.getLatLng();
          document.getElementById('latitude').value = lat;
          document.getElementById('longitude').value = lng;
        });
      });
    }

    // Temperature Chart
    document.addEventListener('DOMContentLoaded', () => {
      try {
        const temperatureData = <%- JSON.stringify(temperatureData) %>;
        const labels = temperatureData.map(data => data.date);
        const tempMax = temperatureData.map(data => data.temp_max);
        const tempMin = temperatureData.map(data => data.temp_min);

        const ctx = document.getElementById('temperatureChart').getContext('2d');
        new Chart(ctx, {
          type: 'line',
          data: {
            labels: labels,
            datasets: [
              {
                label: 'Max Temperature (°C)',
                data: tempMax,
                borderColor: 'rgba(255, 99, 132, 1)',
                backgroundColor: 'rgba(255, 99, 132, 0.2)',
                fill: true,
              },
              {
                label: 'Min Temperature (°C)',
                data: tempMin,
                borderColor: 'rgba(54, 162, 235, 1)',
                backgroundColor: 'rgba(54, 162, 235, 0.2)',
                fill: true,
              },
            ],
          },
          options: {
            responsive: true,
            plugins: {
              legend: { position: 'top' },
              title: { display: true, text: 'Daily Temperature Trends' }
            }
          }
        });
      } catch (error) {
        console.error('Error rendering temperature chart:', error);
      }
    });

    document.querySelectorAll('.upload-btn').forEach(btn => {
    btn.addEventListener('click', () => {
      const sectorId = btn.dataset.sectorid;
      document.getElementById('uploadSectorId').value = sectorId;
    });
  });

  document.getElementById('uploadForm').addEventListener('submit', async (e) => {
    e.preventDefault();
    const formData = new FormData(e.target);

    try {
      const response = await fetch('/upload/image', {
        method: 'POST',
        body: formData
      });
      
      const result = await response.json();
      if (response.ok) {
        alert(result.message);
        $('#uploadImageModal').modal('hide');
      } else {
        throw new Error(result.error || 'Upload failed');
      }
    } catch (error) {
      alert(error.message);
    }
  });

  document.getElementById('imageInput').addEventListener('change', function() {
    const label = this.nextElementSibling;
    label.textContent = this.files.length > 0 
      ? `${this.files.length} files selected` 
      : 'Choose files';
  });

  // Results Modal Handler
document.querySelectorAll('.view-results-btn').forEach(btn => {
  btn.addEventListener('click', async () => {
    const sectorId = btn.dataset.sectorid;
    const modal = $('#resultsModal');
    const content = document.getElementById('resultsContent');
    
    try {
      content.innerHTML = `
        <div class="text-center py-4">
          <div class="spinner-border text-primary" role="status">
            <span class="sr-only">Loading...</span>
          </div>
        </div>`;

      const response = await fetch(`/results/${sectorId}`);
      const html = await response.text();
      
      content.innerHTML = html;
      document.getElementById('resultsSectorId').textContent = sectorId;
      modal.modal('show');
      
    } catch (error) {
      content.innerHTML = `
        <div class="alert alert-danger">
          Failed to load results: ${error.message}
        </div>`;
    }
    });
  });
  </script>
</body>
</html>