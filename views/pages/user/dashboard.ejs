<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>FieldAi Dashboard</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/css/bootstrap.min.css">
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <style>
    body {
      margin: 0;
    }

    .custom-bg {
      background-color: #f8f9fa;
    }

    header {
      position: sticky;
      top: 0;
      z-index: 1030;
    }

    .sidebar {
      position: fixed;
      top: 50px;
      left: 0;
      height: calc(100vh - 50px);
      width: 240px;
      background-color: #f8f9fa;
      border-right: 1px solid #ddd;
      overflow-y: auto;
    }

    .content {
      margin-left: 240px;
      padding: 20px;
      scroll-behavior: smooth;
    }

    .content-section {
      margin-bottom: 30px; 
      scroll-margin-left: 240px;
    }

    #temperatureChart, #rainfallChart {
      max-height: 400px;
    }

    #previewContainer img {
      max-width: 100px;
      margin: 10px;
    }

    .static-bottom {
      position: sticky;
      bottom: 0;
    }
  </style>
</head>
<body>
  <header>
    <%- include('../../partials/user/header') %>
  </header>

  <div class="container-fluid px-0">
    <div class="row no-gutters">
      <%- include('../../partials/user/sidebar') %>

      <main class="content col">
        <div id="temperature-section" class="content-section">
          <h4>Temperature Forecase Trends</h4>
          <canvas id="temperatureChart"></canvas>
        </div>

        <div id="rainfall-section" class="content-section">
          <h4>Rainfall Tracker</h4>
          <canvas id="rainfallChart"></canvas>
        </div>

        <div id="image-upload-section" class="content-section">
          <h4>Image Upload for Corn Counting</h4>
          <form id="uploadForm" enctype="multipart/form-data">
            <input type="file" id="imageInput" multiple accept="image/*" />
            <button type="submit" class="btn btn-primary mt-2">Upload</button>
          </form>
          <div id="previewContainer" class="mt-3 d-flex flex-wrap">
          </div>
          <div id="resultsContainer" class="mt-3">
          </div>
        </div>

      </main>
    </div>
  </div>

  <footer class="bg-dark text-center text-white py-3 static-bottom">
    <%- include('../../partials/user/footer') %>
  </footer>


  <script>
    document.addEventListener('DOMContentLoaded', () => {
      try {
        const temperatureData = <%- JSON.stringify(temperatureData) %>;
  
        const labels = temperatureData.map((data) => data.date);
        const tempMax = temperatureData.map((data) => data.temp_max);
        const tempMin = temperatureData.map((data) => data.temp_min);
  
        const ctx = document.getElementById('temperatureChart').getContext('2d');
        new Chart(ctx, {
          type: 'line',
          data: {
            labels: labels,
            datasets: [
              {
                label: 'Max Temperature (°C)',
                data: tempMax,
                borderColor: 'rgba(255, 99, 132, 1)',
                backgroundColor: 'rgba(255, 99, 132, 0.2)',
                fill: true,
              },
              {
                label: 'Min Temperature (°C)',
                data: tempMin,
                borderColor: 'rgba(54, 162, 235, 1)',
                backgroundColor: 'rgba(54, 162, 235, 0.2)',
                fill: true,
              },
            ],
          },
          options: {
            responsive: true,
            plugins: {
              legend: {
                position: 'top',
              },
              title: {
                display: true,
                text: 'Daily Temperature Trends',
              },
            },
          },
        });
      } catch (error) {
        console.error('Error rendering the temperature chart:', error);
        alert('Failed to load temperature data. Please try again later.');
      }
    });

    document.addEventListener('DOMContentLoaded', async () => {
    try {
      const response = await fetch('/user/rainfall-irrigation');
      if (!response.ok) throw new Error('Failed to fetch rainfall data.');

      const rainfallData = await response.json();

      const labels = rainfallData.map((data) => data.date);
      const precipitation = rainfallData.map((data) => data.precipitation);
      const irrigationNeeded = rainfallData.map((data) => data.irrigationNeeded ? 5 : null);

      const ctx = document.getElementById('rainfallChart').getContext('2d');
      new Chart(ctx, {
        type: 'bar',
        data: {
          labels: labels,
          datasets: [
            {
              label: 'Rainfall (mm)',
              data: precipitation,
              backgroundColor: 'rgba(54, 162, 235, 0.6)',
              borderColor: 'rgba(54, 162, 235, 1)',
              borderWidth: 1,
            },
            {
              label: 'Irrigation Needed',
              data: irrigationNeeded,
              type: 'line',
              borderColor: 'rgba(255, 99, 132, 1)',
              backgroundColor: 'rgba(255, 99, 132, 0.2)',
              fill: true,
            },
          ],
        },
        options: {
          responsive: true,
          plugins: {
            legend: {
              position: 'top',
            },
            title: {
              display: true,
              text: 'Rainfall and Irrigation Tracker',
            },
          },
          scales: {
            y: {
              beginAtZero: true,
              title: {
                display: true,
                text: 'Rainfall (mm)',
              },
            },
          },
        },
      });
    } catch (error) {
      console.error('Error displaying the rainfall chart:', error);
      alert('Failed to load rainfall data. Please try again later.');
    }
  });

  const uploadForm = document.getElementById('uploadForm');
  const imageInput = document.getElementById('imageInput');
  const previewContainer = document.getElementById('previewContainer');
  const resultsContainer = document.getElementById('resultsContainer');

  imageInput.addEventListener('change', () => {
    previewContainer.innerHTML = '';
    Array.from(imageInput.files).forEach((file) => {
      const img = document.createElement('img');
      img.src = URL.createObjectURL(file);
      img.style.maxWidth = '100px';
      img.style.margin = '10px';
      previewContainer.appendChild(img);
    });
  });

  uploadForm.addEventListener('submit', async (event) => {
    event.preventDefault();
    const formData = new FormData(uploadForm);

    const response = await fetch('/api/upload-images', {
      method: 'POST',
      body: formData,
    });

    const results = await response.json();
    resultsContainer.innerHTML = results
      .map((result) => `<p>${result.filename}: ${result.cornCount} corn detected</p>`)
      .join('');
  });

  </script>
</body>
</html>
