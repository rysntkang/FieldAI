<!DOCTYPE html>
<html lang="en">
<head>
  <title>FieldAi Dashboard</title>
  <%- include('../../partials/user/head') %>
  <style>
    .sidebar {
      height: 100vh;
      width: 250px;
      position: fixed;
      top: 0;
      left: 0;
      background-color: #343a40;
      padding-top: 20px;
    }
    .sidebar a {
      color: #fff;
      text-decoration: none;
      padding: 15px 20px;
      display: block;
    }
    .sidebar a:hover {
      background-color: #495057;
    }
    .sidebar a.active {
      background-color: #007bff;
      color: #fff;
    }
    .content {
      margin-left: 250px;
      padding: 20px;
    }
    .sector-card {
      padding: 0;
      cursor: default;
    }
    #map {
      height: 300px;
      margin-top: 10px;
    }
    .chart-container {
      position: relative;
      background-color: #fff;
      border: 1px solid #ddd;
      border-radius: 8px;
      padding: 15px;
      margin-bottom: 20px;
      height: 500px;
    }
    .chart-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 10px;
    }
    .tutorial-btn {
      font-size: 0.9em;
    }
    .chart-canvas {
      width: 100%;
      height: 100%;
    }
    .farming-tip {
      display: flex;
      align-items: center;
      margin-bottom: 8px;
      cursor: pointer;
    }
    .farming-tip .emoji {
      font-size: 1.2em;
      margin-right: 8px;
    }
    #weatherSource {
      margin-top: 10px;
      font-style: italic;
      color: #555;
    }
    #resetWeatherBtn {
      margin: 10px 0;
    }
    /* --- Added CSS for button spacing --- */
    .btn-container .btn {
      margin: 5px;
    }
  </style>
</head>
<body>
  <%- include('../../partials/user/sidebar') %>

  <div class="content">
    <h3>Your Sectors</h3>

    <!-- Success/Error Message Placeholders -->
    <% if (successMessage) { %>
      <div class="alert alert-success"><%= successMessage %></div>
    <% } %>
    <% if (errorMessage) { %>
      <div class="alert alert-danger"><%= errorMessage %></div>
    <% } %>

    <div class="row" id="sectors-container">
      <% if (sectors.length > 0) { %>
        <% sectors.forEach(sector => { %>
          <div class="col-md-3 sector-card" data-lat="<%= sector.latitude %>" data-lng="<%= sector.longitude %>">
            <div class="card">
              <div class="card-body">
                <h5 class="card-title"><%= sector.name %></h5>
                <p class="card-text">Lat: <%= sector.latitude %>, Lng: <%= sector.longitude %></p>
                <div class="btn-container d-flex justify-content-around flex-wrap mt-2">
                  <button class="btn btn-primary btn-sm upload-btn" 
                          data-toggle="modal" 
                          data-target="#uploadImageModal" 
                          data-sectorid="<%= sector.sector_id %>">
                    Upload Images
                  </button>
                  <button class="btn btn-secondary btn-sm view-results-btn" 
                          data-toggle="modal" 
                          data-target="#resultsModal" 
                          data-sectorid="<%= sector.sector_id %>">
                    View Results
                  </button>
                  <button class="btn btn-info btn-sm update-weather-btn">
                    Update Weather
                  </button>
                  <button class="btn btn-warning btn-sm edit-sector-btn" data-sectorid="<%= sector.sector_id %>">
                    Edit Sector
                  </button>
                  <button class="btn btn-dark btn-sm delete-sector-btn" data-sectorid="<%= sector.sector_id %>">
                    Delete Sector
                  </button>
                </div>
              </div>
            </div>
          </div>
        <% }); %>        
      <% } else { %>
        <div class="col-12 text-left">
          <p class="text-muted">No sectors available. Please add a new sector to get started.</p>
        </div>
      <% } %>
    </div>
    
    <button class="btn btn-success mt-3" data-toggle="modal" data-target="#addSectorModal">
      Add New Sector
    </button>
    <hr>

    <% if (weatherData && weatherData.length > 0) { %>
      <h3>Weather Trend Forecast</h3>
      <p id="weatherSource">
        Currently displaying weather data for: Account Location (<%= user.latitude %>, <%= user.longitude %>)
      </p>
      <button id="resetWeatherBtn" class="btn btn-info btn-sm">Reset to Account Location</button>
      
      <div id="temperature-section" class="content-section">
        <div class="row mb-4">
          <div class="col-md-4">
            <div class="card bg-light">
              <div class="card-body">
                <h5 class="card-title">🌱 Farming Tips</h5>
                <div id="farmingTips"></div>
              </div>
            </div>
          </div>
          <div class="col-md-8">
            <div class="chart-container">
              <div class="chart-header">
                <h4>Heat Accumulation (GDD)</h4>
                <button class="btn btn-link tutorial-btn" onclick="window.location.href='/user/tutorial#attributes'">
                  <i class="fas fa-question-circle"></i> What is this?
                </button>
              </div>
              <canvas id="gddChart" class="chart-canvas"></canvas>
            </div>
          </div>
        </div>
        <hr>
        <div class="chart-container">
          <div class="chart-header">
            <h4>Temperature</h4>
            <button class="btn btn-link tutorial-btn" onclick="window.location.href='/user/tutorial#attributes'">
              <i class="fas fa-question-circle"></i> What is this?
            </button>
          </div>
          <canvas id="temperatureChart" class="chart-canvas"></canvas>
        </div>
        <hr>
        <div class="chart-container">
          <div class="chart-header">
            <h4>Precipitation</h4>
            <button class="btn btn-link tutorial-btn" onclick="window.location.href='/user/tutorial#attributes'">
              <i class="fas fa-question-circle"></i> What is this?
            </button>
          </div>
          <canvas id="precipitationChart" class="chart-canvas"></canvas>
        </div>
        <hr>
        <div class="chart-container">
          <div class="chart-header">
            <h4>Wind Speed</h4>
            <button class="btn btn-link tutorial-btn" onclick="window.location.href='/user/tutorial#attributes'">
              <i class="fas fa-question-circle"></i> What is this?
            </button>
          </div>
          <canvas id="windSpeedChart" class="chart-canvas"></canvas>
        </div>
        <hr>
        <div class="chart-container">
          <div class="chart-header">
            <h4>Soil Moisture</h4>
            <button class="btn btn-link tutorial-btn" onclick="window.location.href='/user/tutorial#attributes'">
              <i class="fas fa-question-circle"></i> What is this?
            </button>
          </div>
          <canvas id="soilMoistureChart" class="chart-canvas"></canvas>
        </div>
      </div>
      <hr>
    <% } %>

    <!-- Include modals -->
    <%- include('../../partials/user/modals/addSector') %>
    <%- include('../../partials/user/modals/editSector') %>
    <%- include('../../partials/user/modals/upload') %>
    <%- include('../../partials/user/modals/results') %>
  </div>

  <footer class="bg-dark text-center text-white py-3 static-bottom">
    <%- include('../../partials/user/footer') %>
  </footer>

  <%- include('../../partials/user/scripts') %>
  <script>
    let temperatureChart, precipitationChart, windSpeedChart, gddChart, soilMoistureChart;

    function createChart(canvasId, data, labels, title, yLabel, borderColor, backgroundColor, type = 'line') {
      const ctx = document.getElementById(canvasId).getContext('2d');
      return new Chart(ctx, {
        type: type,
        data: {
          labels: labels,
          datasets: [{
            label: title,
            data: data,
            borderColor: borderColor,
            backgroundColor: backgroundColor,
            fill: true,
            tension: 0.4
          }]
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          layout: { padding: { bottom: 20 } },
          scales: {
            x: {
              title: { display: true, text: 'Date' },
              ticks: { autoSkip: true, maxRotation: 45, minRotation: 45 }
            },
            y: { title: { display: true, text: yLabel } }
          },
          plugins: {
            legend: { position: 'top' },
            title: { display: true, text: title }
          }
        }
      });
    }

    const accountLat = <%= user.latitude %>;
    const accountLng = <%= user.longitude %>;

    $('#addSectorModal').on('shown.bs.modal', function() {
      initMap();
      setTimeout(() => map.invalidateSize(), 100);
    });

    let map, marker;
    function initMap() {
      if (map) { map.off(); map.remove(); map = null; }
      navigator.geolocation.getCurrentPosition(position => {
        const { latitude, longitude } = position.coords;
        map = L.map('map').setView([latitude, longitude], 13);
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png').addTo(map);
        marker = L.marker([latitude, longitude], { draggable: true }).addTo(map);
        document.getElementById('latitude').value = latitude;
        document.getElementById('longitude').value = longitude;
        marker.on('dragend', () => {
          const { lat, lng } = marker.getLatLng();
          document.getElementById('latitude').value = lat;
          document.getElementById('longitude').value = lng;
        });
      });
    }

    function generateFarmingTips(data) {
      const todayDate = new Date().toISOString().split("T")[0];
      let today = data.find(item => item.date === todayDate);
      if (!today) {
        today = data[0];
      }
      
      const gddAccumulated = Number(today.gdd_accumulated) || 0;
      const soilMoisture   = Number(today.soil_moisture)   || 0;
      const precipitation  = Number(today.precipitation)   || 0;
      const windSpeed      = Number(today.wind_speed)      || 0;
      const tempMin        = Number(today.temp_min)        || 0;
      const tempMax        = Number(today.temp_max)        || 0;
      
      const tips = [];
      
      if (gddAccumulated > 100) {
        tips.push({
          emoji: '✔️',
          text: 'Good time for planting!',
          type: 'success',
          explanation: 'The accumulated heat (GDD) is high enough for optimal maize planting.'
        });
      } else {
        tips.push({
          emoji: '⏳',
          text: 'Wait for warmer days before planting.',
          type: 'warning',
          explanation: 'The current GDD is low, indicating that the heat accumulation is not yet ideal for planting.'
        });
      }
      
      if (soilMoisture < 0.3) {
        tips.push({
          emoji: '🚰',
          text: 'Irrigation needed – soil moisture is low.',
          type: 'danger',
          explanation: 'Soil moisture levels are below the optimal range. Your crops may need watering soon.'
        });
      } else {
        tips.push({
          emoji: '💧',
          text: 'Soil moisture is good.',
          type: 'success',
          explanation: 'The soil moisture level is within a healthy range for crop growth.'
        });
      }
      
      if (precipitation > 5) {
        tips.push({
          emoji: '☔',
          text: 'Heavy rain expected – ensure proper drainage.',
          type: 'info',
          explanation: 'High precipitation may lead to waterlogging; consider checking your drainage systems.'
        });
      } else if (precipitation < 1) {
        tips.push({
          emoji: '🌵',
          text: 'Low precipitation – consider supplemental irrigation.',
          type: 'warning',
          explanation: 'Very little rain is expected, which may stress your crops without additional watering.'
        });
      } else {
        tips.push({
          emoji: '🌤️',
          text: 'Precipitation levels are optimal for growth.',
          type: 'success',
          explanation: 'The forecasted precipitation is in an ideal range for crop development.'
        });
      }
      
      if (windSpeed > 15) {
        tips.push({
          emoji: '💨',
          text: 'High winds detected – consider windbreaks.',
          type: 'warning',
          explanation: 'Strong winds can damage young plants. It might be wise to set up windbreaks.'
        });
      } else if (windSpeed < 3) {
        tips.push({
          emoji: '🍃',
          text: 'Very calm winds – ensure adequate ventilation.',
          type: 'info',
          explanation: 'While calm winds are generally good, extremely low movement can reduce natural air circulation. Monitor for potential issues like fungal growth.'
        });
      } else {
        tips.push({
          emoji: '🍃',
          text: 'Wind conditions are favorable.',
          type: 'success',
          explanation: 'Moderate winds provide good air circulation without risking damage to your crops.'
        });
      }
      
      if (tempMin < 10) {
        tips.push({
          emoji: '❄️',
          text: 'Low temperatures expected – protect young plants from frost.',
          type: 'warning',
          explanation: 'The forecasted minimum temperature is low, increasing the risk of frost damage for sensitive crops.'
        });
      } else {
        tips.push({
          emoji: '☀️',
          text: 'Temperature conditions are safe – low frost risk.',
          type: 'success',
          explanation: 'The forecasted minimum temperature is within a safe range, minimizing frost concerns.'
        });
      }
      
      if (tempMax > 35) {
        tips.push({
          emoji: '🔥',
          text: 'High temperatures expected – consider shade and extra irrigation.',
          type: 'warning',
          explanation: 'Very high maximum temperatures can stress plants and reduce yield. Consider using shade nets and increasing irrigation.'
        });
      }
      
      return tips;
    }

    document.addEventListener('DOMContentLoaded', () => {
      const weatherData = <%- JSON.stringify(weatherData) %>;

      function getTargetChartId(tipText) {
        const text = tipText.toLowerCase();
        if (text.includes('irrigation') || text.includes('soil moisture')) return 'soilMoistureChart';
        else if (text.includes('plant')) return 'gddChart';
        else if (text.includes('rain') || text.includes('precipitation')) return 'precipitationChart';
        else if (text.includes('wind')) return 'windSpeedChart';
        else if (text.includes('temperature') || text.includes('frost')) return 'temperatureChart';
        else return null;
      }

      const tips = generateFarmingTips(weatherData);
      const farmingTipsDiv = document.getElementById('farmingTips');
      farmingTipsDiv.innerHTML = '';
      tips.forEach(tip => {
        const tipDiv = document.createElement('div');
        tipDiv.classList.add('farming-tip');
        tipDiv.setAttribute('title', tip.explanation);
        const targetChartId = getTargetChartId(tip.text);
        if (targetChartId) {
          tipDiv.setAttribute('data-target-chart', targetChartId);
          tipDiv.style.cursor = 'pointer';
        }
        const emojiSpan = document.createElement('span');
        emojiSpan.classList.add('emoji');
        emojiSpan.textContent = tip.emoji;
        const textSpan = document.createElement('span');
        textSpan.classList.add('tip-text', `text-${tip.type}`);
        textSpan.textContent = tip.text;
        tipDiv.appendChild(emojiSpan);
        tipDiv.appendChild(textSpan);
        farmingTipsDiv.appendChild(tipDiv);
      });

      document.querySelectorAll('.farming-tip[data-target-chart]').forEach(tip => {
        tip.addEventListener('click', () => {
          const targetId = tip.getAttribute('data-target-chart');
          const targetCanvas = document.getElementById(targetId);
          if (targetCanvas) {
            targetCanvas.closest('.chart-container').scrollIntoView({ behavior: 'smooth' });
          }
        });
      });

      temperatureChart = createChart(
        'temperatureChart',
        weatherData.map(item => item.temp_max),
        weatherData.map(item => item.date),
        'Daily Temperature Trends',
        'Temperature (°C)',
        'rgba(255, 99, 132, 1)',
        'rgba(255, 99, 132, 0.2)'
      );
      precipitationChart = createChart(
        'precipitationChart',
        weatherData.map(item => item.precipitation),
        weatherData.map(item => item.date),
        'Daily Precipitation',
        'Precipitation (mm)',
        'rgba(75, 192, 192, 1)',
        'rgba(75, 192, 192, 0.5)',
        'bar'
      );
      windSpeedChart = createChart(
        'windSpeedChart',
        weatherData.map(item => item.wind_speed),
        weatherData.map(item => item.date),
        'Daily Wind Speed',
        'Wind Speed (m/s)',
        'rgba(255, 205, 86, 1)',
        'rgba(255, 205, 86, 0.2)'
      );
      gddChart = createChart(
        'gddChart',
        weatherData.map(item => item.gdd_accumulated),
        weatherData.map(item => item.date),
        'Growing Degree Days',
        'GDD Accumulation',
        'rgba(139, 69, 19, 1)',
        'rgba(139, 69, 19, 0.2)'
      );
      soilMoistureChart = createChart(
        'soilMoistureChart',
        weatherData.map(item => item.soil_moisture),
        weatherData.map(item => item.date),
        'Soil Moisture Level',
        'Moisture (m³/m³)',
        'rgba(0, 123, 255, 1)',
        'rgba(0, 123, 255, 0.2)'
      );

      window.addEventListener('resize', () => {
        temperatureChart.resize();
        precipitationChart.resize();
        windSpeedChart.resize();
        gddChart.resize();
        soilMoistureChart.resize();
      });

      document.querySelectorAll('.edit-sector-btn').forEach(button => {
        button.addEventListener('click', function() {
          const sectorCard = this.closest('.sector-card');
          const sectorId = this.getAttribute('data-sectorid');
          const sectorName = sectorCard.querySelector('.card-title').textContent;
          const latitude = sectorCard.getAttribute('data-lat');
          const longitude = sectorCard.getAttribute('data-lng');

          document.getElementById('editSectorId').value = sectorId;
          document.getElementById('editSectorName').value = sectorName;
          document.getElementById('editLatitude').value = latitude;
          document.getElementById('editLongitude').value = longitude;

          $('#editSectorModal').modal('show');

          initEditMap(latitude, longitude);
        });
      });

      function initEditMap(lat, lng) {
        if (window.editMapInstance) {
          window.editMapInstance.remove();
        }
        window.editMapInstance = L.map('editMap').setView([lat, lng], 13);
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png').addTo(window.editMapInstance);
        let marker = L.marker([lat, lng], { draggable: true }).addTo(window.editMapInstance);
        marker.on('dragend', function() {
          const pos = marker.getLatLng();
          document.getElementById('editLatitude').value = pos.lat;
          document.getElementById('editLongitude').value = pos.lng;
        });
      }
    });

    document.getElementById('uploadForm').addEventListener('submit', async (e) => {
      e.preventDefault();
      const formData = new FormData(e.target);
      try {
        const response = await fetch('/upload/image', { method: 'POST', body: formData });
        if (!response.ok) throw new Error(await response.text());
        alert('Upload successful!');
        $('#uploadImageModal').modal('hide');
        location.reload();
      } catch (error) {
        alert(`Upload failed: ${error.message}`);
      }
    });

    async function loadResultsModal(sectorId) { // ... (Improved - See below)
      const modal = $('#resultsModal');
      const content = document.getElementById('resultsContent');
      content.innerHTML = `
        <div class="text-center py-4">
          <div class="spinner-border text-primary" role="status">
            <span class="sr-only">Loading...</span>
          </div>
        </div>`;
      try {
        const response = await fetch(`/results/${sectorId}`);
        if (!response.ok) throw new Error(`Server error: ${response.status}`);
        content.innerHTML = await response.text();  // Load the new content
        modal.modal('show');
      } catch (error) {
        content.innerHTML = `<div class="alert alert-danger">Failed to load results: ${error.message}</div>`;
      }
    }

    document.getElementById('sectors-container').addEventListener('click', (e) => {
      const updateBtn = e.target.closest('.update-weather-btn');
      if (updateBtn) {
        const sectorCard = updateBtn.closest('.sector-card');
        if (sectorCard) {
          const lat = sectorCard.getAttribute('data-lat');
          const lng = sectorCard.getAttribute('data-lng');
          const sectorName = sectorCard.querySelector('.card-title').textContent;
          updateWeatherForSector(lat, lng, sectorName);
        }
        return;
      }
      const uploadBtn = e.target.closest('.upload-btn');
      if (uploadBtn) {
        document.getElementById('uploadSectorId').value = uploadBtn.dataset.sectorid;
        return;
      }
      const resultsBtn = e.target.closest('.view-results-btn');
      if (resultsBtn) {
        loadResultsModal(resultsBtn.dataset.sectorid);
        return;
      }
    });

    async function updateWeatherForSector(lat, lng, source = 'Sector') {
      try {
        const response = await fetch(`/user/weather?lat=${lat}&lng=${lng}`);
        if (!response.ok) throw new Error(await response.text());
        const newWeatherData = await response.json();

        document.getElementById('weatherSource').textContent =
          `Currently displaying weather data for: ${source} Location (${lat}, ${lng})`;

        function getTargetChartId(tipText) {
          const text = tipText.toLowerCase();
          if (text.includes('irrigation') || text.includes('soil moisture')) return 'soilMoistureChart';
          else if (text.includes('plant')) return 'gddChart';
          else if (text.includes('rain') || text.includes('precipitation')) return 'precipitationChart';
          else if (text.includes('wind')) return 'windSpeedChart';
          else if (text.includes('temperature') || text.includes('frost')) return 'temperatureChart';
          else return null;
        }

        const tips = generateFarmingTips(newWeatherData);
        const farmingTipsDiv = document.getElementById('farmingTips');
        farmingTipsDiv.innerHTML = '';
        tips.forEach(tip => {
          const tipDiv = document.createElement('div');
          tipDiv.classList.add('farming-tip');
          tipDiv.setAttribute('title', tip.explanation);
          const targetChartId = getTargetChartId(tip.text);
          if (targetChartId) {
            tipDiv.setAttribute('data-target-chart', targetChartId);
            tipDiv.style.cursor = 'pointer';
          }
          const emojiSpan = document.createElement('span');
          emojiSpan.classList.add('emoji');
          emojiSpan.textContent = tip.emoji;
          const textSpan = document.createElement('span');
          textSpan.classList.add('tip-text', `text-${tip.type}`);
          textSpan.textContent = tip.text;
          tipDiv.appendChild(emojiSpan);
          tipDiv.appendChild(textSpan);
          farmingTipsDiv.appendChild(tipDiv);
        });
        document.querySelectorAll('.farming-tip[data-target-chart]').forEach(tip => {
          tip.addEventListener('click', () => {
            const targetId = tip.getAttribute('data-target-chart');
            const targetCanvas = document.getElementById(targetId);
            if (targetCanvas) {
              targetCanvas.closest('.chart-container').scrollIntoView({ behavior: 'smooth' });
            }
          });
        });

        if (temperatureChart) temperatureChart.destroy();
        if (precipitationChart) precipitationChart.destroy();
        if (windSpeedChart) windSpeedChart.destroy();
        if (gddChart) gddChart.destroy();
        if (soilMoistureChart) soilMoistureChart.destroy();

        temperatureChart = createChart(
          'temperatureChart',
          newWeatherData.map(item => item.temp_max),
          newWeatherData.map(item => item.date),
          'Daily Temperature Trends',
          'Temperature (°C)',
          'rgba(255, 99, 132, 1)',
          'rgba(255, 99, 132, 0.2)'
        );
        precipitationChart = createChart(
          'precipitationChart',
          newWeatherData.map(item => item.precipitation),
          newWeatherData.map(item => item.date),
          'Daily Precipitation',
          'Precipitation (mm)',
          'rgba(75, 192, 192, 1)',
          'rgba(75, 192, 192, 0.5)',
          'bar'
        );
        windSpeedChart = createChart(
          'windSpeedChart',
          newWeatherData.map(item => item.wind_speed),
          newWeatherData.map(item => item.date),
          'Daily Wind Speed',
          'Wind Speed (m/s)',
          'rgba(255, 205, 86, 1)',
          'rgba(255, 205, 86, 0.2)'
        );
        gddChart = createChart(
          'gddChart',
          newWeatherData.map(item => item.gdd_accumulated),
          newWeatherData.map(item => item.date),
          'Growing Degree Days',
          'GDD Accumulation',
          'rgba(139, 69, 19, 1)',
          'rgba(139, 69, 19, 0.2)'
        );
        soilMoistureChart = createChart(
          'soilMoistureChart',
          newWeatherData.map(item => item.soil_moisture),
          newWeatherData.map(item => item.date),
          'Soil Moisture Level',
          'Moisture (m³/m³)',
          'rgba(0, 123, 255, 1)',
          'rgba(0, 123, 255, 0.2)'
        );
      } catch (error) {
        console.error("Error updating weather for sector:", error);
        alert("Failed to update weather data for the selected location.");
      }
    }

    document.getElementById('sectors-container').addEventListener('click', (e) => {
      const deleteBtn = e.target.closest('.delete-sector-btn');
      if (deleteBtn) {
        const sectorId = deleteBtn.getAttribute('data-sectorid');
        const confirmDelete = confirm('Are you sure you want to delete this sector? This action cannot be undone.');
        if (confirmDelete) {
          fetch(`/user/deleteSector/${sectorId}`, {
            method: 'DELETE'
          })
          .then(response => {
            if (!response.ok) {
              return response.json().then(err => { 
                throw new Error(err.message || 'Failed to delete sector.'); 
              });
            }
            return response.json();
          })
          .then(data => {
            window.location.href = '/user/dashboard?success=' + encodeURIComponent(data.message);
          })
          .catch(error => {
            window.location.href = '/user/dashboard?error=' + encodeURIComponent(error.message);
          });
        }
        return;
      }
    });

    document.getElementById('resultsModal').addEventListener('click', function(e) {
      const deleteAttemptBtn = e.target.closest('.delete-attempt-btn');
      if (deleteAttemptBtn) {
        e.stopPropagation();
        const uploadId = deleteAttemptBtn.dataset.uploadId;
        console.log('Delete attempt button clicked for upload ID:', uploadId);

        if (confirm("Are you sure you want to delete this upload attempt?")) {
          fetch(`/user/deleteAttempt/${uploadId}`, {  
            method: 'DELETE'
          })
          .then(response => {
            if (!response.ok) {
              return response.json().then(err => {
                throw new Error(err.message || 'Failed to delete upload attempt.');
              });
            }
            return response.json();
          })
          .then(data => {
            if (data.success) {
              // Redirect with a success message via query parameters
              window.location.href = `/user/dashboard?success=${encodeURIComponent(data.message)}`;
            } else {
              window.location.href = `/user/dashboard?error=${encodeURIComponent(data.message)}`;
            }
          })
          .catch(error => {
            window.location.href = `/user/dashboard?error=${encodeURIComponent(error.message)}`;
            console.error("Error deleting upload attempt:", error);
          });
        }
      }
    });

    document.getElementById('imageInput').addEventListener('change', function (e) {
    const files = e.target.files;
    let labelText = 'Choose files';
    
    if (files.length === 1) {
      labelText = files[0].name;  // or '1 file selected'
    } else if (files.length > 1) {
      labelText = files.length + ' files selected';
    }
    
    const label = this.nextElementSibling;
    if (label) {
      label.textContent = labelText;
    }
  });
  </script>
</body>
</html>